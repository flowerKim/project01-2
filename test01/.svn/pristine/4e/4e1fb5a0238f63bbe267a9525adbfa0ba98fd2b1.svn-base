package net.bitacademy.java72.control.json;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import net.bitacademy.java72.domain.Checkin;
import net.bitacademy.java72.service.CheckinService;
import net.bitacademy.java72.service.MemberService;

@Controller("json.CheckinController")
@RequestMapping("/bitin/checkin")
public class CheckinController {
  @Autowired CheckinService checkinService;
  @Autowired ServletContext servletContext;
  
  @RequestMapping("/insertCheckin")
  public Object attendCheckin(String qr, Checkin checkin) throws Exception {
    
    System.out.println("checkin.getThisUrl : " + checkin.getThisUrl());
    
    int studentNo = Integer.parseInt(checkin.getThisUrl().substring(
        checkin.getThisUrl().length() - 20).substring(0, 6));
    
    System.out.println("수강생 번호 : " + studentNo);
    checkin.setStudentNo(studentNo);

    //confirm이 true일 경우, 컨트롤러 진입시간 체크
    Calendar calendar = Calendar.getInstance();
    SimpleDateFormat in_time_format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String inTime = in_time_format.format(calendar.getTime());
    System.out.println("in_time: " + inTime);
    
    //데이터 담기.
    Map<String, Object> checkinMap = new HashMap<String, Object>();
    checkinMap.put("inTime", inTime);
    checkinMap.put("studentNo", studentNo);
    
    int in_time_h = 
        (Integer.parseInt(
            inTime.substring(11, inTime.length()).substring(0, 2))) * 60;
    int in_time_m = 
        Integer.parseInt(

            inTime.substring(11, inTime.length()).substring(2, 4));
    System.out.println("in_time_m: "+ in_time_m);
    
    if(in_time_h >0 && in_time_h<=9) {
      checkinMap.put("checkinTime", "1");
    }
    
    checkinService.insertCheckin(checkin);

    return checkinMap;
    
  }
  
  @RequestMapping("/getTodayInfo")
  public Object getTodayInfo(String today) {
    
    Map<String, Object> todayInfo = new HashMap<String, Object>();
    if (checkinService.getTodayInfo(today) == null) {
      todayInfo.put("data", checkinService.getTodayInfo(today));
    } else {
      todayInfo.put("data", "Not Null");
    }
    
    return todayInfo;
    
  }
  
  @RequestMapping("/allMember")
  public Object allMember() {
    
    Map<String, Object> allMember = new HashMap<String, Object>();
    allMember.put("data", checkinService.allMember());
    
    return allMember;
    
  }
  
  @RequestMapping("/insertToday")
  public Object insert(int studentNo) throws Exception {
      int count = checkinService.insertToday(studentNo);
      
      Map<String,Object> result = new HashMap<String,Object>();
      if (count > 0) {
        result.put("data", "success");
      } else {
        result.put("data", "failure");
      }
      
      return result;
  }
  
}
