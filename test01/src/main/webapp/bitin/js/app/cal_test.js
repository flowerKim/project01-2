function Lunar() {
    Lunar.prototype = {
        solMonthDay: [31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        SOLAR_TO_LUNAR: 1,
        LUNAR_TO_SOLAR: 2,
        lunarToSolar: function(year, month, day, leapmonth) {
            return this.calculateDate(year, month, day, this.LUNAR_TO_SOLAR, leapmonth);
        },
        solarToLunar: function(year, month, day) {
            return this.calculateDate(year, month, day, this.SOLAR_TO_LUNAR, 0);
        },
        calculateDate: function(year, month, day, type, leapmonth) {
            sMonthDay = this.solMonthDay;
            lMonthTable = this.lunarMonthTable;
            var sYear, sMonth, sDay, lYear, lMonth, lDay;
            var lunLeapMonth, lunMonthDay;
            var i, lunIndex;
            if (!this.checkValidDate(year)) {
                return false;
            }
            if (year >= 2013) {
                /* 기준일자 양력 2013년 1월 1일 (음력 2012년 11월 20일) */
                sYear = 2013, sMonth = 1, sDay = 1;
                lYear = 2012, lMonth = 11, lDay = 20;
                lunLeapMonth = 0;
                sMonthDay[1] = 28; /* 2013 년 2월 28일 */
                lunMonthDay = 30; /* 2012년 11월 */
            } else if (year >= 2010) {
                /* 기준일자 양력 2010년 1월 1일 (음력 2009년 11월 17일) */
                sYear = 2010, sMonth = 1, sDay = 1;
                lYear = 2009, lMonth = 11, lDay = 17;
                lunLeapMonth = 0;
                sMonthDay[1] = 28; /* 2010 년 2월 28일 */
                lunMonthDay = 30; /* 2009년 11월 */
            } else if (year >= 2000) {
                /* 기준일자 양력 2000년 1월 1일 (음력 1999년 11월 25일) */
                sYear = 2000, sMonth = 1, sDay = 1;
                lYear = 1999, lMonth = 11, lDay = 25;
                lunLeapMonth = 0;
                sMonthDay[1] = 29;
                lunMonthDay = 30;
            } else if (year >= 1970) {
                /* 기준일자 양력 1970년 1월 1일 (음력 1969년 11월 24일) */
                sYear = 1970, sMonth = 1, sDay = 1;
                lYear = 1969, lMonth = 11, lDay = 24;
                lunLeapMonth = 0;
                sMonthDay[1] = 28; /* 1970 년 2월 28일 */
                lunMonthDay = 30; /* 1969년 11월 */
            } else if (year >= 1940) {
                /* 기준일자 양력 1940년 1월 1일 (음력 1939년 11월 22일) */
                sYear = 1940, sMonth = 1, sDay = 1;
                lYear = 1939, lMonth = 11, lDay = 22;
                lunLeapMonth = 0;
                sMonthDay[1] = 29; /* 1940 년 2월 29일 */
                lunMonthDay = 29; /* 1939년 11월 */
            } else {
                /* 기준일자 양력 1900년 1월 1일 (음력 1899년 12월 1일) */
                sYear = 1900, sMonth = 1, sDay = 1;
                lYear = 1899, lMonth = 12, lDay = 1;
                lunLeapMonth = 0;
                sMonthDay[1] = 28; /* 1900 년 2월 28일 */
                lunMonthDay = 30;
            }
            lunIndex = lYear - 1899;
            while (true) {
                if (type == this.SOLAR_TO_LUNAR && year == sYear && month == sMonth && day == sDay) {
                    return {
                        "year": lYear,
                        "month": lMonth,
                        "day": lDay,
                        "leapmonth": lunLeapMonth
                    };
                } else if (type == this.LUNAR_TO_SOLAR && year == lYear && month == lMonth && day == lDay && leapmonth == lunLeapMonth) {
                    return {
                        "year": sYear,
                        "month": sMonth,
                        "day": sDay,
                        "leapmonth": 0
                    };
                }
                if (sMonth == 12 && sDay == 31) {
                    sYear++;
                    sMonth = 1;
                    sDay = 1;
                    if (sYear % 400 == 0) {
                        sMonthDay[1] = 29;
                    } else if (sYear % 100 == 0) {
                        sMonthDay[1] = 28;
                    } else if (sYear % 4 == 0) {
                        sMonthDay[1] = 29;
                    } else {
                        sMonthDay[1] = 28;
                    }
                } else if (sMonthDay[sMonth - 1] == sDay) {
                    sMonth++;
                    sDay = 1;
                } else {
                    sDay++;
                }
                if (lMonth == 12 && ((lMonthTable[lunIndex][lMonth - 1] == 1 && lDay == 29) || (lMonthTable[lunIndex][lMonth - 1] == 2 && lDay == 30))) {
                    lYear++;
                    lMonth = 1;
                    lDay = 1;
                    if (lYear > 2060) {
                        return false;
                    }
                    lunIndex = lYear - 1899;
                    if (lMonthTable[lunIndex][lMonth - 1] == 1)
                        lunMonthDay = 29;
                    else if (lMonthTable[lunIndex][lMonth - 1] == 2)
                        lunMonthDay = 30;
                } else if (lDay == lunMonthDay) {
                    if (lMonthTable[lunIndex][lMonth - 1] >= 3 && lunLeapMonth == 0) {
                        lDay = 1;
                        lunLeapMonth = 1;
                    } else {
                        lMonth++;
                        lDay = 1;
                        lunLeapMonth = 0;
                    }
                    if (lMonthTable[lunIndex][lMonth - 1] == 1)
                        lunMonthDay = 29;
                    else if (lMonthTable[lunIndex][lMonth - 1] == 2)
                        lunMonthDay = 30;
                    else if (lMonthTable[lunIndex][lMonth - 1] == 3)
                        lunMonthDay = 29;
                    else if (lMonthTable[lunIndex][lMonth - 1] == 4 && lunLeapMonth == 0)
                        lunMonthDay = 29;
                    else if (lMonthTable[lunIndex][lMonth - 1] == 4 && lunLeapMonth == 1)
                        lunMonthDay = 30;
                    else if (lMonthTable[lunIndex][lMonth - 1] == 5 && lunLeapMonth == 0)
                        lunMonthDay = 30;
                    else if (lMonthTable[lunIndex][lMonth - 1] == 5 && lunLeapMonth == 1)
                        lunMonthDay = 29;
                    else if (lMonthTable[lunIndex][lMonth - 1] == 6)
                        lunMonthDay = 30;
                } else {
                    lDay++;
                }
            }
        },
        checkValidDate: function(year) {
            if (year < 1900 || year > 2060) {
                return false;
            } else {
                return true;
            }
        }
    }
    Lunar.prototype.lunarMonthTable = [
        [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 2, 5, 2, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
        [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
        [1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2],
        [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1],
        [2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2],
        [1, 2, 2, 4, 1, 2, 1, 2, 1, 2, 1, 2],
        [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
        [2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
        [1, 5, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
        [2, 1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2],
        [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
        [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
        [2, 2, 1, 2, 5, 1, 2, 1, 2, 1, 1, 2],
        [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
        [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
        [2, 3, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1],
        [2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 5, 2, 2, 1, 2, 2],
        [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],
        [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
        [2, 1, 2, 2, 3, 2, 1, 1, 2, 1, 2, 2],
        [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2],
        [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],
        [2, 1, 2, 5, 2, 1, 2, 2, 1, 2, 1, 2],
        [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
        [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
        [1, 5, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2],
        [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],
        [1, 2, 2, 1, 1, 5, 1, 2, 1, 2, 2, 1],
        [2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1],
        [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
        [1, 2, 2, 1, 6, 1, 2, 1, 2, 1, 1, 2],
        [1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2],
        [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
        [2, 1, 4, 1, 2, 1, 2, 1, 2, 2, 2, 1],
        [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],
        [2, 2, 1, 1, 2, 1, 4, 1, 2, 2, 1, 2],
        [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2],
        [2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],
        [2, 2, 1, 2, 2, 4, 1, 1, 2, 1, 2, 1],
        [2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2],
        [1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],
        [1, 1, 2, 4, 1, 2, 1, 2, 2, 1, 2, 2],
        [1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],
        [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],
        [2, 5, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
        [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
        [2, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2],
        [2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],
        [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
        [1, 2, 1, 2, 4, 2, 1, 2, 1, 2, 1, 2],
        [1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2],
        [1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],
        [2, 1, 4, 1, 1, 2, 1, 2, 1, 2, 2, 2],
        [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
        [2, 1, 2, 1, 2, 1, 1, 5, 2, 1, 2, 2],
        [1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
        [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],
        [2, 1, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1],
        [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],
        [2, 1, 2, 3, 2, 1, 2, 1, 2, 2, 2, 1],
        [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
        [1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2],
        [1, 2, 5, 2, 1, 1, 2, 1, 1, 2, 2, 1],
        [2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2],
        [1, 2, 2, 1, 2, 1, 5, 2, 1, 2, 1, 2],
        [1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
        [2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
        [1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
        [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1],
        [2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1, 2],
        [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
        [2, 2, 1, 2, 1, 2, 1, 5, 2, 1, 1, 2],
        [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1],
        [2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
        [2, 1, 1, 2, 1, 6, 1, 2, 2, 1, 2, 1],
        [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
        [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],
        [2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2, 2],
        [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
        [2, 1, 2, 2, 1, 1, 2, 1, 1, 5, 2, 2],
        [1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
        [1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],
        [2, 1, 2, 2, 1, 5, 2, 2, 1, 2, 1, 2],
        [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
        [2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
        [1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2, 2],
        [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],
        [1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
        [1, 2, 5, 2, 1, 2, 1, 1, 2, 1, 2, 1],
        [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
        [1, 2, 2, 1, 2, 2, 1, 5, 2, 1, 1, 2],
        [1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
        [1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
        [2, 1, 1, 2, 3, 2, 2, 1, 2, 2, 2, 1],
        [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],
        [2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1],
        [2, 2, 2, 3, 2, 1, 1, 2, 1, 2, 1, 2],
        [2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],
        [2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2],
        [1, 5, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
        [1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1],
        [2, 1, 2, 1, 2, 1, 5, 2, 2, 1, 2, 2],
        [1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],
        [2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],
        [2, 2, 1, 1, 5, 1, 2, 1, 2, 1, 2, 2],
        [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
        [2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],
        [2, 1, 6, 2, 1, 2, 1, 1, 2, 1, 2, 1],
        [2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
        [1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1],
        [2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],
        [1, 2, 1, 2, 3, 2, 1, 2, 1, 2, 2, 2],
        [1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
        [2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
        [2, 1, 2, 5, 2, 1, 1, 2, 1, 2, 1, 2],
        [1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],
        [2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2],
        [1, 5, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],
        [2, 1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1],
        [2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
        [1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2],
        [1, 2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1],
        [2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2],
        [1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1],
        [2, 1, 5, 2, 1, 2, 2, 1, 2, 1, 2, 1],
        [2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 5, 2],
        [1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
        [2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
        [2, 2, 1, 2, 1, 4, 1, 1, 2, 2, 1, 2],
        [2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
        [2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1],
        [2, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 1],
        [2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1],
        [2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],
        [1, 5, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
        [1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],
        [2, 1, 2, 1, 1, 2, 3, 2, 1, 2, 2, 2],
        [2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
        [2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2],
        [2, 1, 2, 2, 4, 1, 2, 1, 1, 2, 1, 2],
        [1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],
        [2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1],
        [2, 1, 4, 1, 2, 1, 2, 2, 1, 2, 2, 1],
        [2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2],
        [1, 2, 1, 1, 2, 1, 1, 6, 1, 2, 2, 2],
        [1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],
        [1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
        [1, 2, 2, 1, 2, 4, 1, 1, 2, 1, 2, 1],
        [2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
        [1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1],
        [2, 1, 2, 4, 2, 1, 2, 1, 2, 2, 1, 1],
        [2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
        [2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2]
    ]
}